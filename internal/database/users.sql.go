// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package database

import (
	"context"
	"time"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, created_at, updated_at, premium, email, hashed_password)
VALUES (?, ?, ?, ?, ?, ?)
RETURNING id, created_at, updated_at, premium, email, hashed_password
`

type CreateUserParams struct {
	ID             interface{}
	CreatedAt      time.Time
	UpdatedAt      time.Time
	Premium        bool
	Email          string
	HashedPassword string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Premium,
		arg.Email,
		arg.HashedPassword,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Premium,
		&i.Email,
		&i.HashedPassword,
	)
	return i, err
}

const deleteAllUsers = `-- name: DeleteAllUsers :exec
DELETE FROM users
`

func (q *Queries) DeleteAllUsers(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteAllUsers)
	return err
}

const downgradeUserMembership = `-- name: DowngradeUserMembership :exec
UPDATE users
SET premium = false
WHERE id = ?
`

func (q *Queries) DowngradeUserMembership(ctx context.Context, id interface{}) error {
	_, err := q.db.ExecContext(ctx, downgradeUserMembership, id)
	return err
}

const returnUserFromEmail = `-- name: ReturnUserFromEmail :one
SELECT id, created_at, updated_at, premium, email, hashed_password FROM users WHERE email = ?
`

func (q *Queries) ReturnUserFromEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, returnUserFromEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Premium,
		&i.Email,
		&i.HashedPassword,
	)
	return i, err
}

const returnUserFromID = `-- name: ReturnUserFromID :one
SELECT id, created_at, updated_at, premium, email, hashed_password FROM users WHERE id = ?
`

func (q *Queries) ReturnUserFromID(ctx context.Context, id interface{}) (User, error) {
	row := q.db.QueryRowContext(ctx, returnUserFromID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Premium,
		&i.Email,
		&i.HashedPassword,
	)
	return i, err
}

const updateUserInfo = `-- name: UpdateUserInfo :exec
UPDATE users
SET email = ?, hashed_password = ?, updated_at = ?
WHERE id = ?
`

type UpdateUserInfoParams struct {
	Email          string
	HashedPassword string
	UpdatedAt      time.Time
	ID             interface{}
}

func (q *Queries) UpdateUserInfo(ctx context.Context, arg UpdateUserInfoParams) error {
	_, err := q.db.ExecContext(ctx, updateUserInfo,
		arg.Email,
		arg.HashedPassword,
		arg.UpdatedAt,
		arg.ID,
	)
	return err
}

const upgradeUserMembership = `-- name: UpgradeUserMembership :exec
UPDATE users
SET premium = true
WHERE id = ?
`

func (q *Queries) UpgradeUserMembership(ctx context.Context, id interface{}) error {
	_, err := q.db.ExecContext(ctx, upgradeUserMembership, id)
	return err
}
