// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: recipes.sql

package database

import (
	"context"
	"database/sql"
	"time"
)

const createRecipe = `-- name: CreateRecipe :one
INSERT INTO recipes (id, created_at, updated_at, ingredients, instructions, notes, img_link, user_id)
VALUES (?, ?, ?, ?, ?, ?, ?, ?)
RETURNING id, created_at, updated_at, ingredients, instructions, notes, img_link, user_id
`

type CreateRecipeParams struct {
	ID           interface{}
	CreatedAt    time.Time
	UpdatedAt    time.Time
	Ingredients  string
	Instructions sql.NullString
	Notes        sql.NullString
	ImgLink      sql.NullString
	UserID       interface{}
}

func (q *Queries) CreateRecipe(ctx context.Context, arg CreateRecipeParams) (Recipe, error) {
	row := q.db.QueryRowContext(ctx, createRecipe,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Ingredients,
		arg.Instructions,
		arg.Notes,
		arg.ImgLink,
		arg.UserID,
	)
	var i Recipe
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Ingredients,
		&i.Instructions,
		&i.Notes,
		&i.ImgLink,
		&i.UserID,
	)
	return i, err
}

const deleteAllRecipes = `-- name: DeleteAllRecipes :exec
DELETE FROM recipes
`

func (q *Queries) DeleteAllRecipes(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteAllRecipes)
	return err
}

const deteleRecipe = `-- name: DeteleRecipe :exec
DELETE FROM recipes WHERE id = ?
`

func (q *Queries) DeteleRecipe(ctx context.Context, id interface{}) error {
	_, err := q.db.ExecContext(ctx, deteleRecipe, id)
	return err
}

const returnAllRecipes = `-- name: ReturnAllRecipes :many
SELECT id, created_at, updated_at, ingredients, instructions, notes, img_link, user_id FROM recipes ORDER BY created_at
`

func (q *Queries) ReturnAllRecipes(ctx context.Context) ([]Recipe, error) {
	rows, err := q.db.QueryContext(ctx, returnAllRecipes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Recipe
	for rows.Next() {
		var i Recipe
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Ingredients,
			&i.Instructions,
			&i.Notes,
			&i.ImgLink,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const returnAllRecipesByAuthor = `-- name: ReturnAllRecipesByAuthor :many
SELECT id, created_at, updated_at, ingredients, instructions, notes, img_link, user_id FROM recipes WHERE user_id = ? ORDER BY created_at
`

func (q *Queries) ReturnAllRecipesByAuthor(ctx context.Context, userID interface{}) ([]Recipe, error) {
	rows, err := q.db.QueryContext(ctx, returnAllRecipesByAuthor, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Recipe
	for rows.Next() {
		var i Recipe
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Ingredients,
			&i.Instructions,
			&i.Notes,
			&i.ImgLink,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const returnAllRecipesByAuthorDESC = `-- name: ReturnAllRecipesByAuthorDESC :many
SELECT id, created_at, updated_at, ingredients, instructions, notes, img_link, user_id FROM recipes WHERE user_id = ? ORDER BY created_at DESC
`

func (q *Queries) ReturnAllRecipesByAuthorDESC(ctx context.Context, userID interface{}) ([]Recipe, error) {
	rows, err := q.db.QueryContext(ctx, returnAllRecipesByAuthorDESC, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Recipe
	for rows.Next() {
		var i Recipe
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Ingredients,
			&i.Instructions,
			&i.Notes,
			&i.ImgLink,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const returnAllRecipesDESC = `-- name: ReturnAllRecipesDESC :many
SELECT id, created_at, updated_at, ingredients, instructions, notes, img_link, user_id FROM recipes ORDER BY created_at DESC
`

func (q *Queries) ReturnAllRecipesDESC(ctx context.Context) ([]Recipe, error) {
	rows, err := q.db.QueryContext(ctx, returnAllRecipesDESC)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Recipe
	for rows.Next() {
		var i Recipe
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Ingredients,
			&i.Instructions,
			&i.Notes,
			&i.ImgLink,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const returnRecipe = `-- name: ReturnRecipe :one
SELECT id, created_at, updated_at, ingredients, instructions, notes, img_link, user_id FROM recipes WHERE id = ?
`

func (q *Queries) ReturnRecipe(ctx context.Context, id interface{}) (Recipe, error) {
	row := q.db.QueryRowContext(ctx, returnRecipe, id)
	var i Recipe
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Ingredients,
		&i.Instructions,
		&i.Notes,
		&i.ImgLink,
		&i.UserID,
	)
	return i, err
}
